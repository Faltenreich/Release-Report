apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.mikepenz.aboutlibraries.plugin'

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId 'com.faltenreich.release'
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 7
        versionName '0.6.0'
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "PARSE_SERVER_URL", getLocalProperty('parse.serverUrl'))
        buildConfigField("String", "PARSE_APPLICATION_ID", getLocalProperty('parse.applicationId'))
        buildConfigField("String", "PARSE_CLIENT_KEY", getLocalProperty('parse.clientKey'))
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'flavor'
    productFlavors {
        demo {
            applicationIdSuffix '.demo'
        }
        beta {
            applicationIdSuffix '.beta'
        }
        production {
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.0-RC2"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.threeten:threetenbp:1.4.4'
    testImplementation "androidx.test.ext:junit:${versions.jUnitRunner}"

    debugImplementation 'androidx.fragment:fragment-testing:1.2.5'

    androidTestImplementation "androidx.test.ext:junit:${versions.jUnitRunner}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.espresso}"
    androidTestImplementation "androidx.work:work-testing:${versions.work}"
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.4'
    implementation 'de.psdev.licensesdialog:licensesdialog:2.1.0'

    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.paging:paging-runtime-ktx:2.1.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'

    implementation "androidx.work:work-runtime-ktx:${versions.work}"

    implementation "androidx.navigation:navigation-fragment-ktx:${versions.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${versions.navigation}"

    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle}"
    kapt "androidx.lifecycle:lifecycle-common-java8:${versions.lifecycle}"

    implementation 'com.google.android.material:material:1.3.0-alpha02'

    implementation "com.github.parse-community.Parse-SDK-Android:parse:${versions.parse}"
    implementation "com.github.parse-community.Parse-SDK-Android:ktx:${versions.parse}"

    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"

    implementation "com.mikepenz:aboutlibraries-core:${versions.aboutLibraries}"
    implementation "com.mikepenz:aboutlibraries:${versions.aboutLibraries}"
    implementation 'com.faltenreich:skeletonlayout:2.0.1'
    implementation 'com.whiteelephant:monthandyearpicker:1.3.0'
    implementation 'com.veinhorn.scrollgalleryview:library:1.2.8'
}

def getLocalProperty(String identifier) {
    def file = rootProject.file('local.properties')
    if (file.exists()) {
        def properties = new Properties()
        properties.load(new FileInputStream(file))
        def property = properties[identifier]
        if (property != null) {
            return property
        } else {
            throw new GradleException("local.properties is missing " + identifier)
        }
    } else {
        throw new GradleException("local.properties is missing")
    }
}

task applyVersionToReadme() {
    def android = project.extensions.findByName("android")
    def versionName = android.defaultConfig.versionName
    def string = 'img.shields.io/badge/Release-'
    def regex = "$string([0-9.]+)"
    def with = "$string$versionName"
    ant.replaceregexp(file: "${rootProject.projectDir}/README.md", match: regex, flags: 'g', replace: with)
}

assemble.dependsOn applyVersionToReadme