apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply plugin: 'androidx.navigation.safeargs.kotlin'

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId 'com.faltenreich.release'
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 3
        versionName '0.2.1'
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        buildConfigField("String", "PARSE_SERVER_URL", getLocalProperty('parse.serverUrl'))
        buildConfigField("String", "PARSE_APPLICATION_ID", getLocalProperty('parse.applicationId'))
        buildConfigField("String", "PARSE_CLIENT_KEY", getLocalProperty('parse.clientKey'))
    }

    buildTypes {
        debug {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-dontobfuscate.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'version'
    productFlavors {
        demo {
            dimension 'version'
            applicationIdSuffix '.demo'
        }
        beta {
            dimension 'version'
            applicationIdSuffix '.beta'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

androidExtensions {
    experimental = true
}

ext {
    parse = '1.23.1'
    lifecycle = '2.2.0'
    glide = '4.9.0'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.threeten:threetenbp:1.4.2'

    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.1'
    implementation 'de.psdev.licensesdialog:licensesdialog:2.1.0'

    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.preference:preference:1.1.0'
    implementation 'androidx.paging:paging-runtime-ktx:2.1.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.work:work-runtime-ktx:2.3.4'
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle"
    kapt "androidx.lifecycle:lifecycle-common-java8:$lifecycle"

    implementation 'com.google.android.material:material:1.2.0-alpha05'

    implementation "com.github.parse-community.Parse-SDK-Android:parse:$parse"
    implementation "com.github.parse-community.Parse-SDK-Android:ktx:$parse"

    implementation "com.github.bumptech.glide:glide:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"

    implementation 'com.lapism:searchview:28.0.0'
    implementation 'com.faltenreich:skeletonlayout:2.0.1'
    implementation 'com.whiteelephant:monthandyearpicker:1.3.0'
    implementation 'com.veinhorn.scrollgalleryview:library:1.2.8'
}

def getLocalProperty(String identifier) {
    def file = rootProject.file('local.properties')
    if (file.exists()) {
        def properties = new Properties()
        properties.load(new FileInputStream(file))
        def property = properties[identifier]
        if (property != null) {
            return property
        } else {
            throw new GradleException("local.properties is missing " + identifier)
        }
    } else {
        throw new GradleException("local.properties is missing")
    }
}

task applyVersionToReadme() {
    def android = project.extensions.findByName("android")
    def versionName = android.defaultConfig.versionName
    def string = 'img.shields.io/badge/Release-'
    def regex = "$string([0-9.]+)"
    def with = "$string$versionName"
    ant.replaceregexp(file: "${rootProject.projectDir}/README.md", match: regex, flags: 'g', replace: with)
}

assemble.dependsOn applyVersionToReadme